import streamlit as st
import pandas as pd
import sqlite3
from datetime import datetime
import io
import xlsxwriter
from datetime import timedelta

# SQLite veritabanÄ± baÄŸlantÄ±sÄ±
conn = sqlite3.connect('siparisler.db')

# SipariÅŸler tablosunu oluÅŸtur
def create_table():
    conn.execute('''
    CREATE TABLE IF NOT EXISTS siparisler (
        id INTEGER PRIMARY KEY,
        tarih TEXT,
        isim TEXT,
        restoran TEXT,
        yemek TEXT,
        fiyat REAL,
        not_ TEXT
    )
    ''')
    conn.commit()

create_table()

# Excel indirme fonksiyonu
def to_excel(df):
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, sheet_name='SipariÅŸler', index=False)
        workbook = writer.book
        worksheet = writer.sheets['SipariÅŸler']

        # Format ayarlarÄ±
        para_format = workbook.add_format({'num_format': '#,##0.00 â‚º'})
        tarih_format = workbook.add_format({'num_format': 'dd/mm/yyyy hh:mm'})

        # SÃ¼tun geniÅŸliklerini ayarla
        worksheet.set_column('A:A', 20)  # Tarih sÃ¼tunu
        worksheet.set_column('B:B', 10)  # Ä°sim sÃ¼tunu
        worksheet.set_column('C:C', 10)  # Restoran sÃ¼tunu
        worksheet.set_column('D:D', 15)  # Yemek sÃ¼tunu
        worksheet.set_column('E:E', 12)  # Fiyat sÃ¼tunu
        worksheet.set_column('F:F', 30)  # Not sÃ¼tunu

        # Fiyat sÃ¼tununa format uygula
        worksheet.set_column('E:E', 12, para_format)

    return output.getvalue()

[... rest of your existing code until the order placement section ...]

    if st.button("SipariÅŸ Ver") and isim:
        # Yeni sipariÅŸi veritabanÄ±na ekle
        conn.execute('''
            INSERT INTO siparisler (tarih, isim, restoran, yemek, fiyat, not_) 
            VALUES (?, ?, ?, ?, ?, ?)''', 
            ((datetime.now() + timedelta(hours=3)).strftime("%Y-%m-%d %H:%M"), 
             isim, secilen_restoran, secilen_yemek, fiyat, not_girisi))
        conn.commit()
        st.success("SipariÅŸiniz alÄ±ndÄ±!")

# SipariÅŸleri gÃ¶rÃ¼ntÃ¼leme
with col2:
    st.header("GÃ¼nlÃ¼k SipariÅŸler")
    # VeritabanÄ±ndan tÃ¼m sipariÅŸleri oku
    df = pd.read_sql_query('SELECT * FROM siparisler', conn)

    if not df.empty:
        # KiÅŸi bazlÄ± toplam tutarlar
        st.subheader("KiÅŸi BazlÄ± Toplam")
        kisi_bazli = df.groupby('isim')['fiyat'].sum().reset_index()
        st.dataframe(kisi_bazli)

        # Excel indirme butonlarÄ±
        col_a, col_b = st.columns(2)

        with col_a:
            # TÃ¼m sipariÅŸlerin Excel'i
            excel_data = to_excel(df)
            st.download_button(
                label="ğŸ“¥ TÃ¼m SipariÅŸleri Ä°ndir",
                data=excel_data,
                file_name=f'siparisler_{datetime.now().strftime("%Y%m%d")}.xlsx',
                mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            )

        with col_b:
            # KiÅŸi bazlÄ± toplamlarÄ±n Excel'i
            excel_data_summary = to_excel(kisi_bazli)
            st.download_button(
                label="ğŸ“¥ Ã–zeti Ä°ndir",
                data=excel_data_summary,
                file_name=f'siparis_ozeti_{datetime.now().strftime("%Y%m%d")}.xlsx',
                mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            )

        # TÃ¼m sipariÅŸler
        st.subheader("TÃ¼m SipariÅŸler")
        st.dataframe(df)

        # Toplam tutar
        toplam_tutar = df['fiyat'].sum()
        st.metric("Toplam Tutar", f"{toplam_tutar} TL")

        # SipariÅŸleri temizleme butonu
        if st.button("SipariÅŸleri Temizle"):
            conn.execute('DELETE FROM siparisler')
            conn.commit()
            st.success("TÃ¼m sipariÅŸler temizlendi!")
            st.experimental_rerun()
    else:
        st.info("HenÃ¼z sipariÅŸ bulunmamaktadÄ±r.")

# UygulamayÄ± kapatÄ±rken veritabanÄ± baÄŸlantÄ±sÄ±nÄ± kapat
conn.close()
